/*
  本题有多种方法，O(N^2)的, O(NLOGN)的，以及O(N)的，
  O(N^2)方法最简单(twoSum_1)，两次循环遍历，暴力方法解决。
  O(NLOGN)方法使用排序

*/

public class Solution {

    public int[] twoSum_1(int[] nums, int target) {
        int[] rev = new int[2];
        //Time Complexity: O(N^2)
        for(int i=0; i<nums.length; i++) {
            for(int j=i+1; j<nums.length; j++) {
                if(nums[i] + nums[j] == target) {
                    rev[0] = i;
                    rev[1] = j;
                    return rev;
                }
            }
        }
        return rev;
    }
    public int[] twoSum(int[] nums, int target) {
        int[] rev = new int[2];
        int left = 0, right = nums.length-1;
        //Time Complexity: O(NlogN)
        HashMap<String, Integer> map = new HashMap<String, Integer>();
        for(int i=0; i<nums.length; i++) {
        	if(map.get(nums[i]+"") != null) 
        		map.put(nums[i]+"##", i); // repeat value
        	else map.put(nums[i]+"", i);
        }
        Arrays.sort(nums); // sort from smaller one to larger one
        while(left < right) {
        	if(nums[left] + nums[right] == target) {
        		rev[0] = map.get(nums[left]+"");
        		if(nums[left] == nums[right]) { // only consider two repeat numbers is enough
        			rev[1] = map.get(nums[right]+"##");
        		}
        		else rev[1] = map.get(nums[right]+"");
        		return rev; // only one solution
        	}
        	else if(nums[left] + nums[right] > target) { // larger than target, need smaller entry!
        		right--;
        	}
        	else { // smaller than target, need larger entry!
        		left++;
        	}
        }
        return rev;
    }
}
