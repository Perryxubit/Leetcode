public class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
    	List<List<Integer>> list = new ArrayList<List<Integer>>();
    	List<Integer> group = new ArrayList<Integer>();
        recursion(candidates, 0, target, group, list);
    	return list;
    }
    
    public void recursion(int[] nums, int index, int target, List<Integer> group, List<List<Integer>> list) {
    	if(target == 0) { // correct answer group
    		List<Integer> tempgroup = new ArrayList<Integer>(group);
    		list.add(tempgroup);
    		return ;
    	}
    	else if(target < 0) { // wrong answer, just return
    		return ; 
    	}
    	else {
	    	for(int i=index; i<nums.length; i++) {
	    		group.add(nums[i]); // add new number to check
	    		recursion(nums, i, target-nums[i], group, list); // index is used to control the repeat entries
	    		//if we don't set index, there will be duplicated results, like 2 2 3 and 2 3 2 and 3 2 2, 
	    		//we must set index to let loop starts from the current index (not went to previous index)
	    		group.remove(group.size()-1); // remove the last one (backtrace)
	    	}
    	}
    }
}
